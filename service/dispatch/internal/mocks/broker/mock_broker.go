// Code generated by mockery v2.42.1. DO NOT EDIT.

package broker_mock

import (
	deps "github.com/GenesisEducationKyiv/software-engineering-school-4-0-boredgus/service/dispatch/internal/service/deps"
	mock "github.com/stretchr/testify/mock"
)

// Broker is an autogenerated mock type for the Broker type
type Broker struct {
	mock.Mock
}

type Broker_Expecter struct {
	mock *mock.Mock
}

func (_m *Broker) EXPECT() *Broker_Expecter {
	return &Broker_Expecter{mock: &_m.Mock}
}

// CreateSubscription provides a mock function with given fields: sub
func (_m *Broker) CreateSubscription(sub deps.SubscriptionMsg) error {
	ret := _m.Called(sub)

	if len(ret) == 0 {
		panic("no return value specified for CreateSubscription")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(deps.SubscriptionMsg) error); ok {
		r0 = rf(sub)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Broker_CreateSubscription_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateSubscription'
type Broker_CreateSubscription_Call struct {
	*mock.Call
}

// CreateSubscription is a helper method to define mock.On call
//   - sub deps.SubscriptionMsg
func (_e *Broker_Expecter) CreateSubscription(sub interface{}) *Broker_CreateSubscription_Call {
	return &Broker_CreateSubscription_Call{Call: _e.mock.On("CreateSubscription", sub)}
}

func (_c *Broker_CreateSubscription_Call) Run(run func(sub deps.SubscriptionMsg)) *Broker_CreateSubscription_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(deps.SubscriptionMsg))
	})
	return _c
}

func (_c *Broker_CreateSubscription_Call) Return(_a0 error) *Broker_CreateSubscription_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Broker_CreateSubscription_Call) RunAndReturn(run func(deps.SubscriptionMsg) error) *Broker_CreateSubscription_Call {
	_c.Call.Return(run)
	return _c
}

// NewBroker creates a new instance of Broker. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBroker(t interface {
	mock.TestingT
	Cleanup(func())
}) *Broker {
	mock := &Broker{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
