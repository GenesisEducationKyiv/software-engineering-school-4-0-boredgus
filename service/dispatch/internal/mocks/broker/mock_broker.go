// Code generated by mockery v2.42.1. DO NOT EDIT.

package broker_mock

import mock "github.com/stretchr/testify/mock"

// Broker is an autogenerated mock type for the Broker type
type Broker struct {
	mock.Mock
}

type Broker_Expecter struct {
	mock *mock.Mock
}

func (_m *Broker) EXPECT() *Broker_Expecter {
	return &Broker_Expecter{mock: &_m.Mock}
}

// Publish provides a mock function with given fields: msg
func (_m *Broker) Publish(msg interface{}) {
	_m.Called(msg)
}

// Broker_Publish_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Publish'
type Broker_Publish_Call struct {
	*mock.Call
}

// Publish is a helper method to define mock.On call
//   - msg interface{}
func (_e *Broker_Expecter) Publish(msg interface{}) *Broker_Publish_Call {
	return &Broker_Publish_Call{Call: _e.mock.On("Publish", msg)}
}

func (_c *Broker_Publish_Call) Run(run func(msg interface{})) *Broker_Publish_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interface{}))
	})
	return _c
}

func (_c *Broker_Publish_Call) Return() *Broker_Publish_Call {
	_c.Call.Return()
	return _c
}

func (_c *Broker_Publish_Call) RunAndReturn(run func(interface{})) *Broker_Publish_Call {
	_c.Call.Return(run)
	return _c
}

// NewBroker creates a new instance of Broker. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBroker(t interface {
	mock.TestingT
	Cleanup(func())
}) *Broker {
	mock := &Broker{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
