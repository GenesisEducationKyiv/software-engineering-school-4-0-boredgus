// Code generated by mockery v2.42.1. DO NOT EDIT.

package repo_mock

import (
	context "context"

	entities "github.com/GenesisEducationKyiv/software-engineering-school-4-0-boredgus/service/dispatch/internal/entities"
	mock "github.com/stretchr/testify/mock"

	service "github.com/GenesisEducationKyiv/software-engineering-school-4-0-boredgus/service/dispatch/internal/service"
)

// DispatchRepo is an autogenerated mock type for the DispatchRepo type
type DispatchRepo struct {
	mock.Mock
}

type DispatchRepo_Expecter struct {
	mock *mock.Mock
}

func (_m *DispatchRepo) EXPECT() *DispatchRepo_Expecter {
	return &DispatchRepo_Expecter{mock: &_m.Mock}
}

// GetAllDispatches provides a mock function with given fields: ctx
func (_m *DispatchRepo) GetAllDispatches(ctx context.Context) ([]service.DispatchData, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAllDispatches")
	}

	var r0 []service.DispatchData
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]service.DispatchData, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []service.DispatchData); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]service.DispatchData)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DispatchRepo_GetAllDispatches_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllDispatches'
type DispatchRepo_GetAllDispatches_Call struct {
	*mock.Call
}

// GetAllDispatches is a helper method to define mock.On call
//   - ctx context.Context
func (_e *DispatchRepo_Expecter) GetAllDispatches(ctx interface{}) *DispatchRepo_GetAllDispatches_Call {
	return &DispatchRepo_GetAllDispatches_Call{Call: _e.mock.On("GetAllDispatches", ctx)}
}

func (_c *DispatchRepo_GetAllDispatches_Call) Run(run func(ctx context.Context)) *DispatchRepo_GetAllDispatches_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *DispatchRepo_GetAllDispatches_Call) Return(_a0 []service.DispatchData, _a1 error) *DispatchRepo_GetAllDispatches_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DispatchRepo_GetAllDispatches_Call) RunAndReturn(run func(context.Context) ([]service.DispatchData, error)) *DispatchRepo_GetAllDispatches_Call {
	_c.Call.Return(run)
	return _c
}

// GetDispatchByID provides a mock function with given fields: ctx, dispatchId
func (_m *DispatchRepo) GetDispatchByID(ctx context.Context, dispatchId string) (entities.CurrencyDispatch, error) {
	ret := _m.Called(ctx, dispatchId)

	if len(ret) == 0 {
		panic("no return value specified for GetDispatchByID")
	}

	var r0 entities.CurrencyDispatch
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (entities.CurrencyDispatch, error)); ok {
		return rf(ctx, dispatchId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) entities.CurrencyDispatch); ok {
		r0 = rf(ctx, dispatchId)
	} else {
		r0 = ret.Get(0).(entities.CurrencyDispatch)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, dispatchId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DispatchRepo_GetDispatchByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDispatchByID'
type DispatchRepo_GetDispatchByID_Call struct {
	*mock.Call
}

// GetDispatchByID is a helper method to define mock.On call
//   - ctx context.Context
//   - dispatchId string
func (_e *DispatchRepo_Expecter) GetDispatchByID(ctx interface{}, dispatchId interface{}) *DispatchRepo_GetDispatchByID_Call {
	return &DispatchRepo_GetDispatchByID_Call{Call: _e.mock.On("GetDispatchByID", ctx, dispatchId)}
}

func (_c *DispatchRepo_GetDispatchByID_Call) Run(run func(ctx context.Context, dispatchId string)) *DispatchRepo_GetDispatchByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *DispatchRepo_GetDispatchByID_Call) Return(_a0 entities.CurrencyDispatch, _a1 error) *DispatchRepo_GetDispatchByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DispatchRepo_GetDispatchByID_Call) RunAndReturn(run func(context.Context, string) (entities.CurrencyDispatch, error)) *DispatchRepo_GetDispatchByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetSubscribersOfDispatch provides a mock function with given fields: ctx, dispatchId
func (_m *DispatchRepo) GetSubscribersOfDispatch(ctx context.Context, dispatchId string) ([]string, error) {
	ret := _m.Called(ctx, dispatchId)

	if len(ret) == 0 {
		panic("no return value specified for GetSubscribersOfDispatch")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]string, error)); ok {
		return rf(ctx, dispatchId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []string); ok {
		r0 = rf(ctx, dispatchId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, dispatchId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DispatchRepo_GetSubscribersOfDispatch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSubscribersOfDispatch'
type DispatchRepo_GetSubscribersOfDispatch_Call struct {
	*mock.Call
}

// GetSubscribersOfDispatch is a helper method to define mock.On call
//   - ctx context.Context
//   - dispatchId string
func (_e *DispatchRepo_Expecter) GetSubscribersOfDispatch(ctx interface{}, dispatchId interface{}) *DispatchRepo_GetSubscribersOfDispatch_Call {
	return &DispatchRepo_GetSubscribersOfDispatch_Call{Call: _e.mock.On("GetSubscribersOfDispatch", ctx, dispatchId)}
}

func (_c *DispatchRepo_GetSubscribersOfDispatch_Call) Run(run func(ctx context.Context, dispatchId string)) *DispatchRepo_GetSubscribersOfDispatch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *DispatchRepo_GetSubscribersOfDispatch_Call) Return(_a0 []string, _a1 error) *DispatchRepo_GetSubscribersOfDispatch_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DispatchRepo_GetSubscribersOfDispatch_Call) RunAndReturn(run func(context.Context, string) ([]string, error)) *DispatchRepo_GetSubscribersOfDispatch_Call {
	_c.Call.Return(run)
	return _c
}

// NewDispatchRepo creates a new instance of DispatchRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDispatchRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *DispatchRepo {
	mock := &DispatchRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
