// Code generated by mockery v2.42.1. DO NOT EDIT.

package notifier_mock

import (
	notifier "github.com/GenesisEducationKyiv/software-engineering-school-4-0-boredgus/service/notification/internal/service/notifier"
	mock "github.com/stretchr/testify/mock"
)

// Mailman is an autogenerated mock type for the Mailman type
type Mailman struct {
	mock.Mock
}

type Mailman_Expecter struct {
	mock *mock.Mock
}

func (_m *Mailman) EXPECT() *Mailman_Expecter {
	return &Mailman_Expecter{mock: &_m.Mock}
}

// Send provides a mock function with given fields: email
func (_m *Mailman) Send(email notifier.Email) error {
	ret := _m.Called(email)

	if len(ret) == 0 {
		panic("no return value specified for Send")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(notifier.Email) error); ok {
		r0 = rf(email)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Mailman_Send_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Send'
type Mailman_Send_Call struct {
	*mock.Call
}

// Send is a helper method to define mock.On call
//   - email notifier.Email
func (_e *Mailman_Expecter) Send(email interface{}) *Mailman_Send_Call {
	return &Mailman_Send_Call{Call: _e.mock.On("Send", email)}
}

func (_c *Mailman_Send_Call) Run(run func(email notifier.Email)) *Mailman_Send_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(notifier.Email))
	})
	return _c
}

func (_c *Mailman_Send_Call) Return(_a0 error) *Mailman_Send_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Mailman_Send_Call) RunAndReturn(run func(notifier.Email) error) *Mailman_Send_Call {
	_c.Call.Return(run)
	return _c
}

// NewMailman creates a new instance of Mailman. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMailman(t interface {
	mock.TestingT
	Cleanup(func())
}) *Mailman {
	mock := &Mailman{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
