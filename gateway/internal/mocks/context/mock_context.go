// Code generated by mockery v2.42.1. DO NOT EDIT.

package context_mock

import (
	context "context"

	logger "github.com/GenesisEducationKyiv/software-engineering-school-4-0-boredgus/gateway/internal/config/logger"

	mock "github.com/stretchr/testify/mock"
)

// Context is an autogenerated mock type for the Context type
type Context struct {
	mock.Mock
}

type Context_Expecter struct {
	mock *mock.Mock
}

func (_m *Context) EXPECT() *Context_Expecter {
	return &Context_Expecter{mock: &_m.Mock}
}

// BindJSON provides a mock function with given fields: data
func (_m *Context) BindJSON(data interface{}) error {
	ret := _m.Called(data)

	if len(ret) == 0 {
		panic("no return value specified for BindJSON")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}) error); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Context_BindJSON_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BindJSON'
type Context_BindJSON_Call struct {
	*mock.Call
}

// BindJSON is a helper method to define mock.On call
//   - data interface{}
func (_e *Context_Expecter) BindJSON(data interface{}) *Context_BindJSON_Call {
	return &Context_BindJSON_Call{Call: _e.mock.On("BindJSON", data)}
}

func (_c *Context_BindJSON_Call) Run(run func(data interface{})) *Context_BindJSON_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interface{}))
	})
	return _c
}

func (_c *Context_BindJSON_Call) Return(_a0 error) *Context_BindJSON_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Context_BindJSON_Call) RunAndReturn(run func(interface{}) error) *Context_BindJSON_Call {
	_c.Call.Return(run)
	return _c
}

// Context provides a mock function with given fields:
func (_m *Context) Context() context.Context {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Context")
	}

	var r0 context.Context
	if rf, ok := ret.Get(0).(func() context.Context); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(context.Context)
		}
	}

	return r0
}

// Context_Context_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Context'
type Context_Context_Call struct {
	*mock.Call
}

// Context is a helper method to define mock.On call
func (_e *Context_Expecter) Context() *Context_Context_Call {
	return &Context_Context_Call{Call: _e.mock.On("Context")}
}

func (_c *Context_Context_Call) Run(run func()) *Context_Context_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Context_Context_Call) Return(_a0 context.Context) *Context_Context_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Context_Context_Call) RunAndReturn(run func() context.Context) *Context_Context_Call {
	_c.Call.Return(run)
	return _c
}

// Logger provides a mock function with given fields:
func (_m *Context) Logger() logger.Logger {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Logger")
	}

	var r0 logger.Logger
	if rf, ok := ret.Get(0).(func() logger.Logger); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(logger.Logger)
		}
	}

	return r0
}

// Context_Logger_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Logger'
type Context_Logger_Call struct {
	*mock.Call
}

// Logger is a helper method to define mock.On call
func (_e *Context_Expecter) Logger() *Context_Logger_Call {
	return &Context_Logger_Call{Call: _e.mock.On("Logger")}
}

func (_c *Context_Logger_Call) Run(run func()) *Context_Logger_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Context_Logger_Call) Return(_a0 logger.Logger) *Context_Logger_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Context_Logger_Call) RunAndReturn(run func() logger.Logger) *Context_Logger_Call {
	_c.Call.Return(run)
	return _c
}

// Status provides a mock function with given fields: status
func (_m *Context) Status(status int) {
	_m.Called(status)
}

// Context_Status_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Status'
type Context_Status_Call struct {
	*mock.Call
}

// Status is a helper method to define mock.On call
//   - status int
func (_e *Context_Expecter) Status(status interface{}) *Context_Status_Call {
	return &Context_Status_Call{Call: _e.mock.On("Status", status)}
}

func (_c *Context_Status_Call) Run(run func(status int)) *Context_Status_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *Context_Status_Call) Return() *Context_Status_Call {
	_c.Call.Return()
	return _c
}

func (_c *Context_Status_Call) RunAndReturn(run func(int)) *Context_Status_Call {
	_c.Call.Return(run)
	return _c
}

// String provides a mock function with given fields: status, data
func (_m *Context) String(status int, data string) {
	_m.Called(status, data)
}

// Context_String_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'String'
type Context_String_Call struct {
	*mock.Call
}

// String is a helper method to define mock.On call
//   - status int
//   - data string
func (_e *Context_Expecter) String(status interface{}, data interface{}) *Context_String_Call {
	return &Context_String_Call{Call: _e.mock.On("String", status, data)}
}

func (_c *Context_String_Call) Run(run func(status int, data string)) *Context_String_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(string))
	})
	return _c
}

func (_c *Context_String_Call) Return() *Context_String_Call {
	_c.Call.Return()
	return _c
}

func (_c *Context_String_Call) RunAndReturn(run func(int, string)) *Context_String_Call {
	_c.Call.Return(run)
	return _c
}

// NewContext creates a new instance of Context. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewContext(t interface {
	mock.TestingT
	Cleanup(func())
}) *Context {
	mock := &Context{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
