// Code generated by mockery v2.42.1. DO NOT EDIT.

package mailing_mocks

import mock "github.com/stretchr/testify/mock"

// TemplateParser is an autogenerated mock type for the TemplateParser type
type TemplateParser struct {
	mock.Mock
}

type TemplateParser_Expecter struct {
	mock *mock.Mock
}

func (_m *TemplateParser) EXPECT() *TemplateParser_Expecter {
	return &TemplateParser_Expecter{mock: &_m.Mock}
}

// Parse provides a mock function with given fields: templateName, data
func (_m *TemplateParser) Parse(templateName string, data interface{}) ([]byte, error) {
	ret := _m.Called(templateName, data)

	if len(ret) == 0 {
		panic("no return value specified for Parse")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(string, interface{}) ([]byte, error)); ok {
		return rf(templateName, data)
	}
	if rf, ok := ret.Get(0).(func(string, interface{}) []byte); ok {
		r0 = rf(templateName, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(string, interface{}) error); ok {
		r1 = rf(templateName, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TemplateParser_Parse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Parse'
type TemplateParser_Parse_Call struct {
	*mock.Call
}

// Parse is a helper method to define mock.On call
//   - templateName string
//   - data interface{}
func (_e *TemplateParser_Expecter) Parse(templateName interface{}, data interface{}) *TemplateParser_Parse_Call {
	return &TemplateParser_Parse_Call{Call: _e.mock.On("Parse", templateName, data)}
}

func (_c *TemplateParser_Parse_Call) Run(run func(templateName string, data interface{})) *TemplateParser_Parse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(interface{}))
	})
	return _c
}

func (_c *TemplateParser_Parse_Call) Return(_a0 []byte, _a1 error) *TemplateParser_Parse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TemplateParser_Parse_Call) RunAndReturn(run func(string, interface{}) ([]byte, error)) *TemplateParser_Parse_Call {
	_c.Call.Return(run)
	return _c
}

// NewTemplateParser creates a new instance of TemplateParser. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTemplateParser(t interface {
	mock.TestingT
	Cleanup(func())
}) *TemplateParser {
	mock := &TemplateParser{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
