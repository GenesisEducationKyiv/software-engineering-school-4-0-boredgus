// Code generated by mockery v2.42.1. DO NOT EDIT.

package client_mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	services "subscription-api/internal/services"
)

// CurrencyServiceClient is an autogenerated mock type for the CurrencyServiceClient type
type CurrencyServiceClient struct {
	mock.Mock
}

type CurrencyServiceClient_Expecter struct {
	mock *mock.Mock
}

func (_m *CurrencyServiceClient) EXPECT() *CurrencyServiceClient_Expecter {
	return &CurrencyServiceClient_Expecter{mock: &_m.Mock}
}

// Convert provides a mock function with given fields: ctx, params
func (_m *CurrencyServiceClient) Convert(ctx context.Context, params services.ConvertCurrencyParams) (map[string]float64, error) {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for Convert")
	}

	var r0 map[string]float64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, services.ConvertCurrencyParams) (map[string]float64, error)); ok {
		return rf(ctx, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, services.ConvertCurrencyParams) map[string]float64); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]float64)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, services.ConvertCurrencyParams) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CurrencyServiceClient_Convert_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Convert'
type CurrencyServiceClient_Convert_Call struct {
	*mock.Call
}

// Convert is a helper method to define mock.On call
//   - ctx context.Context
//   - params services.ConvertCurrencyParams
func (_e *CurrencyServiceClient_Expecter) Convert(ctx interface{}, params interface{}) *CurrencyServiceClient_Convert_Call {
	return &CurrencyServiceClient_Convert_Call{Call: _e.mock.On("Convert", ctx, params)}
}

func (_c *CurrencyServiceClient_Convert_Call) Run(run func(ctx context.Context, params services.ConvertCurrencyParams)) *CurrencyServiceClient_Convert_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(services.ConvertCurrencyParams))
	})
	return _c
}

func (_c *CurrencyServiceClient_Convert_Call) Return(_a0 map[string]float64, _a1 error) *CurrencyServiceClient_Convert_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CurrencyServiceClient_Convert_Call) RunAndReturn(run func(context.Context, services.ConvertCurrencyParams) (map[string]float64, error)) *CurrencyServiceClient_Convert_Call {
	_c.Call.Return(run)
	return _c
}

// NewCurrencyServiceClient creates a new instance of CurrencyServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCurrencyServiceClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *CurrencyServiceClient {
	mock := &CurrencyServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
